[{"C:\\ecomern-frontend-main\\src\\index.js":"1","C:\\ecomern-frontend-main\\src\\App.js":"2","C:\\ecomern-frontend-main\\src\\store.js":"3","C:\\ecomern-frontend-main\\src\\reportWebVitals.js":"4","C:\\ecomern-frontend-main\\src\\pages\\Login.js":"5","C:\\ecomern-frontend-main\\src\\pages\\Home.js":"6","C:\\ecomern-frontend-main\\src\\pages\\NewProduct.js":"7","C:\\ecomern-frontend-main\\src\\pages\\Signup.js":"8","C:\\ecomern-frontend-main\\src\\pages\\ProductPage.js":"9","C:\\ecomern-frontend-main\\src\\pages\\AdminDashboard.js":"10","C:\\ecomern-frontend-main\\src\\pages\\CategoryPage.js":"11","C:\\ecomern-frontend-main\\src\\pages\\OrdersPage.js":"12","C:\\ecomern-frontend-main\\src\\pages\\EditProductPage.js":"13","C:\\ecomern-frontend-main\\src\\pages\\CartPage.js":"14","C:\\ecomern-frontend-main\\src\\components\\Navigation.js":"15","C:\\ecomern-frontend-main\\src\\components\\ScrollToTop.js":"16","C:\\ecomern-frontend-main\\src\\features\\productSlice.js":"17","C:\\ecomern-frontend-main\\src\\features\\userSlice.js":"18","C:\\ecomern-frontend-main\\src\\services\\appApi.js":"19","C:\\ecomern-frontend-main\\src\\categories.js":"20","C:\\ecomern-frontend-main\\src\\axios.js":"21","C:\\ecomern-frontend-main\\src\\components\\SimilarProduct.js":"22","C:\\ecomern-frontend-main\\src\\components\\ProductPreview.js":"23","C:\\ecomern-frontend-main\\src\\components\\ToastMessage.js":"24","C:\\ecomern-frontend-main\\src\\components\\ClientsAdminPage.js":"25","C:\\ecomern-frontend-main\\src\\components\\DashboardProducts.js":"26","C:\\ecomern-frontend-main\\src\\components\\OrdersAdminPage.js":"27","C:\\ecomern-frontend-main\\src\\components\\Pagination.js":"28","C:\\ecomern-frontend-main\\src\\components\\Loading.js":"29","C:\\ecomern-frontend-main\\src\\components\\CheckoutForm.js":"30"},{"size":917,"mtime":1686647567601,"results":"31","hashOfConfig":"32"},{"size":2881,"mtime":1686647567525,"results":"33","hashOfConfig":"32"},{"size":872,"mtime":1686647567665,"results":"34","hashOfConfig":"32"},{"size":362,"mtime":1686647567636,"results":"35","hashOfConfig":"32"},{"size":2037,"mtime":1686647568096,"results":"36","hashOfConfig":"32"},{"size":2545,"mtime":1686647568081,"results":"37","hashOfConfig":"32"},{"size":5449,"mtime":1686771466682,"results":"38","hashOfConfig":"32"},{"size":2393,"mtime":1686647568275,"results":"39","hashOfConfig":"32"},{"size":4130,"mtime":1686647568199,"results":"40","hashOfConfig":"32"},{"size":1762,"mtime":1686647567961,"results":"41","hashOfConfig":"32"},{"size":2315,"mtime":1686647568030,"results":"42","hashOfConfig":"32"},{"size":2020,"mtime":1686647568160,"results":"43","hashOfConfig":"32"},{"size":5974,"mtime":1686647568045,"results":"44","hashOfConfig":"32"},{"size":4374,"mtime":1686647567994,"results":"45","hashOfConfig":"32"},{"size":5549,"mtime":1686647567780,"results":"46","hashOfConfig":"32"},{"size":270,"mtime":1686647567857,"results":"47","hashOfConfig":"32"},{"size":770,"mtime":1686647567926,"results":"48","hashOfConfig":"32"},{"size":1418,"mtime":1686647567941,"results":"49","hashOfConfig":"32"},{"size":2874,"mtime":1686647568374,"results":"50","hashOfConfig":"32"},{"size":686,"mtime":1686647567569,"results":"51","hashOfConfig":"32"},{"size":128,"mtime":1686647567555,"results":"52","hashOfConfig":"32"},{"size":843,"mtime":1686647567873,"results":"53","hashOfConfig":"32"},{"size":833,"mtime":1686647567842,"results":"54","hashOfConfig":"32"},{"size":701,"mtime":1686647567905,"results":"55","hashOfConfig":"32"},{"size":1385,"mtime":1686647567700,"results":"56","hashOfConfig":"32"},{"size":1944,"mtime":1686647567733,"results":"57","hashOfConfig":"32"},{"size":4235,"mtime":1686647567796,"results":"58","hashOfConfig":"32"},{"size":2344,"mtime":1686647567828,"results":"59","hashOfConfig":"32"},{"size":334,"mtime":1686647567747,"results":"60","hashOfConfig":"32"},{"size":3949,"mtime":1686647567686,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"1nhmvy9",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"65"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"65"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"65"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"65"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"65"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"65"},"C:\\ecomern-frontend-main\\src\\index.js",[],[],[],"C:\\ecomern-frontend-main\\src\\App.js",["165"],[],"import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport NewProduct from \"./pages/NewProduct\";\nimport ProductPage from \"./pages/ProductPage\";\nimport CategoryPage from \"./pages/CategoryPage\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport CartPage from \"./pages/CartPage\";\nimport OrdersPage from \"./pages/OrdersPage\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\nimport EditProductPage from \"./pages/EditProductPage\";\nimport { useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { addNotification } from \"./features/userSlice\";\n\nfunction App() {\n    const user = useSelector((state) => state.user);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        const socket = io(\"ws://localhost:8080\");\n        socket.off(\"notification\").on(\"notification\", (msgObj, user_id) => {\n            // logic for notification\n            if (user_id === user._id) {\n                dispatch(addNotification(msgObj));\n            }\n        });\n\n        socket.off(\"new-order\").on(\"new-order\", (msgObj) => {\n            if (user.isAdmin) {\n                dispatch(addNotification(msgObj));\n            }\n        });\n    }, []);\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <ScrollToTop />\n                <Navigation />\n                <Routes>\n                    <Route index element={<Home />} />\n                    {!user && (\n                        <>\n                            <Route path=\"/login\" element={<Login />} />\n                            <Route path=\"/signup\" element={<Signup />} />\n                        </>\n                    )}\n\n                    {user && (\n                        <>\n                            <Route path=\"/cart\" element={<CartPage />} />\n                            <Route path=\"/orders\" element={<OrdersPage />} />\n                        </>\n                    )}\n                    {user && user.isAdmin && (\n                        <>\n                            <Route path=\"/admin\" element={<AdminDashboard />} />\n                            <Route path=\"/product/:id/edit\" element={<EditProductPage />} />\n                        </>\n                    )}\n                    <Route path=\"/product/:id\" element={<ProductPage />} />\n                    <Route path=\"/category/:category\" element={<CategoryPage />} />\n\n                    <Route path=\"/new-product\" element={<NewProduct />} />\n\n                    <Route path=\"*\" element={<Home />} />\n                </Routes>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","C:\\ecomern-frontend-main\\src\\store.js",[],[],"C:\\ecomern-frontend-main\\src\\reportWebVitals.js",[],[],"C:\\ecomern-frontend-main\\src\\pages\\Login.js",[],[],"C:\\ecomern-frontend-main\\src\\pages\\Home.js",["166","167","168"],[],"import axios from \"../axios\";\nimport React, { useEffect } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport categories from \"../categories\";\nimport \"./Home.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateProducts } from \"../features/productSlice\";\nimport ProductPreview from \"../components/ProductPreview\";\n\nfunction Home() {\n    const dispatch = useDispatch();\n    const products = useSelector((state) => state.products);\n    const lastProducts = products.slice(0, 8);\n    useEffect(() => {\n        axios.get(\"/products\").then(({ data }) => dispatch(updateProducts(data)));\n    }, []);\n    return (\n        <div>\n            <img src=\" https://res.cloudinary.com/learn-code-10/image/upload/v1653947013/yqajnhqf7usk56zkwqi5.png\" className=\"home-banner\" />\n            <div className=\"featured-products-container container mt-4\">\n                <h2>Last products</h2>\n                {/* last products here */}\n                <div className=\"d-flex justify-content-center flex-wrap\">\n                    {lastProducts.map((product) => (\n                        <ProductPreview {...product} />\n                    ))}\n                </div>\n                <div>\n                    <Link to=\"/category/all\" style={{ textAlign: \"right\", display: \"block\", textDecoration: \"none\" }}>\n                        See more {\">>\"}\n                    </Link>\n                </div>\n            </div>\n            {/* sale banner */}\n            <div className=\"sale__banner--container mt-4\">\n                <img src=\"https://res.cloudinary.com/learn-code-10/image/upload/v1654093280/xkia6f13xxlk5xvvb5ed.png\" />\n            </div>\n            <div className=\"recent-products-container container mt-4\">\n                <h2>Categories</h2>\n                <Row>\n                    {categories.map((category) => (\n                        <LinkContainer to={`/category/${category.name.toLocaleLowerCase()}`}>\n                            <Col md={4}>\n                                <div style={{ backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${category.img})`, gap: \"10px\" }} className=\"category-tile\">\n                                    {category.name}\n                                </div>\n                            </Col>\n                        </LinkContainer>\n                    ))}\n                </Row>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;\n","C:\\ecomern-frontend-main\\src\\pages\\NewProduct.js",["169","170"],[],"import React, { useState } from \"react\";\nimport { Alert, Col, Container, Form, Row, Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useCreateProductMutation } from \"../services/appApi\";\nimport axios from \"../axios\";\nimport \"./NewProduct.css\";\n\nfunction NewProduct() {\n    const [name, setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [images, setImages] = useState([]);\n    const [imgToRemove, setImgToRemove] = useState(null);\n    const navigate = useNavigate();\n    const [createProduct, { isError, error, isLoading, isSuccess }] = useCreateProductMutation();\n\n    function handleRemoveImg(imgObj) {\n        setImgToRemove(imgObj.public_id);\n        axios\n            .delete(`/images/${imgObj.public_id}/`)\n            .then((res) => {\n                setImgToRemove(null);\n                setImages((prev) => prev.filter((img) => img.public_id !== imgObj.public_id));\n            })\n            .catch((e) => console.log(e));\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (!name || !description || !price || !category || !images.length) {\n            return alert(\"Please fill out all the fields\");\n        }\n        createProduct({ name, description, price, category, images }).then(({ data }) => {\n            if (data.length > 0) {\n                setTimeout(() => {\n                    navigate(\"/\");\n                }, 1500);\n            }\n        });\n    }\n\n    function showWidget() {\n        const widget = window.cloudinary.createUploadWidget(\n            {\n                cloudName: \"dzdosjf3e\",\n                uploadPreset: \"po4cfgce\",\n            },\n            (error, result) => {\n                if (!error && result.event === \"success\") {\n                    setImages((prev) => [...prev, { url: result.info.url, public_id: result.info.public_id }]);\n                }\n            }\n        );\n        widget.open();\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={6} className=\"new-product__form--container\">\n                    <Form style={{ width: \"100%\" }} onSubmit={handleSubmit}>\n                        <h1 className=\"mt-4\">Create a product</h1>\n                        {isSuccess && <Alert variant=\"success\">Product created with succcess</Alert>}\n                        {isError && <Alert variant=\"danger\">{error.data}</Alert>}\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Product name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter product name\" value={name} required onChange={(e) => setName(e.target.value)} />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Product description</Form.Label>\n                            <Form.Control as=\"textarea\" placeholder=\"Product description\" style={{ height: \"100px\" }} value={description} required onChange={(e) => setDescription(e.target.value)} />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Price($)</Form.Label>\n                            <Form.Control type=\"number\" placeholder=\"Price ($)\" value={price} required onChange={(e) => setPrice(e.target.value)} />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" onChange={(e) => setCategory(e.target.value)}>\n                            <Form.Label>Category</Form.Label>\n                            <Form.Select>\n                                <option disabled selected>\n                                    -- Select One --\n                                </option>\n                                <option value=\"technology\">technology</option>\n                                <option value=\"tablets\">tablets</option>\n                                <option value=\"phones\">phones</option>\n                                <option value=\"laptops\">laptops</option>\n                            </Form.Select>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\">\n                            <Button type=\"button\" onClick={showWidget}>\n                                Upload Images\n                            </Button>\n                            <div className=\"images-preview-container\">\n                                {images.map((image) => (\n                                    <div className=\"image-preview\">\n                                        <img src={image.url} />\n                                        {imgToRemove != image.public_id && <i className=\"fa fa-times-circle\" onClick={() => handleRemoveImg(image)}></i>}\n                                    </div>\n                                ))}\n                            </div>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Button type=\"submit\" disabled={isLoading || isSuccess}>\n                                Create Product\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n                <Col md={6} className=\"new-product__image--container\"></Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default NewProduct;\n","C:\\ecomern-frontend-main\\src\\pages\\Signup.js",[],[],"C:\\ecomern-frontend-main\\src\\pages\\ProductPage.js",["171"],[],"import axios from \"../axios\";\nimport React, { useEffect, useState } from \"react\";\nimport AliceCarousel from \"react-alice-carousel\";\nimport \"react-alice-carousel/lib/alice-carousel.css\";\nimport { Container, Row, Col, Badge, ButtonGroup, Form, Button } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Loading from \"../components/Loading\";\nimport SimilarProduct from \"../components/SimilarProduct\";\nimport \"./ProductPage.css\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useAddToCartMutation } from \"../services/appApi\";\nimport ToastMessage from \"../components/ToastMessage\";\n\nfunction ProductPage() {\n    const { id } = useParams();\n    const user = useSelector((state) => state.user);\n    const [product, setProduct] = useState(null);\n    const [similar, setSimilar] = useState(null);\n    const [addToCart, { isSuccess }] = useAddToCartMutation();\n\n    const handleDragStart = (e) => e.preventDefault();\n    useEffect(() => {\n        axios.get(`/products/${id}`).then(({ data }) => {\n            setProduct(data.product);\n            setSimilar(data.similar);\n        });\n    }, [id]);\n\n    if (!product) {\n        return <Loading />;\n    }\n    const responsive = {\n        0: { items: 1 },\n        568: { items: 2 },\n        1024: { items: 3 },\n    };\n\n    const images = product.pictures.map((picture) => <img className=\"product__carousel--image\" src={picture.url} onDragStart={handleDragStart} />);\n\n    let similarProducts = [];\n    if (similar) {\n        similarProducts = similar.map((product, idx) => (\n            <div className=\"item\" data-value={idx}>\n                <SimilarProduct {...product} />\n            </div>\n        ));\n    }\n\n    return (\n        <Container className=\"pt-4\" style={{ position: \"relative\" }}>\n            <Row>\n                <Col lg={6}>\n                    <AliceCarousel mouseTracking items={images} controlsStrategy=\"alternate\" />\n                </Col>\n                <Col lg={6} className=\"pt-4\">\n                    <h1>{product.name}</h1>\n                    <p>\n                        <Badge bg=\"primary\">{product.category}</Badge>\n                    </p>\n                    <p className=\"product__price\">${product.price}</p>\n                    <p style={{ textAlign: \"justify\" }} className=\"py-3\">\n                        <strong>Description:</strong> {product.description}\n                    </p>\n                    {user && !user.isAdmin && (\n                        <ButtonGroup style={{ width: \"90%\" }}>\n                            <Form.Select size=\"lg\" style={{ width: \"40%\", borderRadius: \"0\" }}>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                            </Form.Select>\n                            <Button size=\"lg\" onClick={() => addToCart({ userId: user._id, productId: id, price: product.price, image: product.pictures[0].url })}>\n                                Add to cart\n                            </Button>\n                        </ButtonGroup>\n                    )}\n                    {user && user.isAdmin && (\n                        <LinkContainer to={`/product/${product._id}/edit`}>\n                            <Button size=\"lg\">Edit Product</Button>\n                        </LinkContainer>\n                    )}\n                    {isSuccess && <ToastMessage bg=\"info\" title=\"Added to cart\" body={`${product.name} is in your cart`} />}\n                </Col>\n            </Row>\n            <div className=\"my-4\">\n                <h2>Similar Products</h2>\n                <div className=\"d-flex justify-content-center align-items-center flex-wrap\">\n                    <AliceCarousel mouseTracking items={similarProducts} responsive={responsive} controlsStrategy=\"alternate\" />\n                </div>\n            </div>\n        </Container>\n    );\n}\n\nexport default ProductPage;\n","C:\\ecomern-frontend-main\\src\\pages\\AdminDashboard.js",[],[],"C:\\ecomern-frontend-main\\src\\pages\\CategoryPage.js",[],[],"C:\\ecomern-frontend-main\\src\\pages\\OrdersPage.js",["172","173"],[],"import React, { useEffect, useState } from \"react\";\nimport { Badge, Container, Table } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"../axios\";\nimport Loading from \"../components/Loading\";\nimport \"./OrdersPage.css\";\n\nfunction OrdersPage() {\n    const user = useSelector((state) => state.user);\n    const [orders, setOrders] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        axios\n            .get(`/users/${user._id}/orders`)\n            .then(({ data }) => {\n                setLoading(false);\n                setOrders(data);\n            })\n            .catch((e) => {\n                setLoading(false);\n                console.log(e);\n            });\n    }, []);\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (orders.length === 0) {\n        return <h1 className=\"text-center pt-3\">No orders yet</h1>;\n    }\n\n    return (\n        <Container>\n            <h1 className=\"text-center\">Your orders</h1>\n            <Table responsive striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Status</th>\n                        <th>Date</th>\n                        <th>Total</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {orders.map((order) => (\n                        <tr>\n                            <td>{order._id}</td>\n                            <td>\n                                <Badge bg={`${order.status == \"processing\" ? \"warning\" : \"success\"}`} text=\"white\">\n                                    {order.status}\n                                </Badge>\n                            </td>\n                            <td>{order.date}</td>\n\n                            <td>${order.total}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </Container>\n    );\n}\n\nexport default OrdersPage;\n","C:\\ecomern-frontend-main\\src\\pages\\EditProductPage.js",["174","175"],[],"import React, { useEffect, useState } from \"react\";\nimport { Alert, Col, Container, Form, Row, Button } from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useUpdateProductMutation } from \"../services/appApi\";\nimport axios from \"../axios\";\nimport \"./NewProduct.css\";\n\nfunction EditProductPage() {\n    const { id } = useParams();\n    const [name, setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [images, setImages] = useState([]);\n    const [imgToRemove, setImgToRemove] = useState(null);\n    const navigate = useNavigate();\n    const [updateProduct, { isError, error, isLoading, isSuccess }] = useUpdateProductMutation();\n\n    useEffect(() => {\n        axios\n            .get(\"/products/\" + id)\n            .then(({ data }) => {\n                const product = data.product;\n                setName(product.name);\n                setDescription(product.description);\n                setCategory(product.category);\n                setImages(product.pictures);\n                setPrice(product.price);\n            })\n            .catch((e) => console.log(e));\n    }, [id]);\n\n    function handleRemoveImg(imgObj) {\n        setImgToRemove(imgObj.public_id);\n        axios\n            .delete(`/images/${imgObj.public_id}/`)\n            .then((res) => {\n                setImgToRemove(null);\n                setImages((prev) => prev.filter((img) => img.public_id !== imgObj.public_id));\n            })\n            .catch((e) => console.log(e));\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        if (!name || !description || !price || !category || !images.length) {\n            return alert(\"Please fill out all the fields\");\n        }\n        updateProduct({ id, name, description, price, category, images }).then(({ data }) => {\n            if (data.length > 0) {\n                setTimeout(() => {\n                    navigate(\"/\");\n                }, 1500);\n            }\n        });\n    }\n\n    function showWidget() {\n        const widget = window.cloudinary.createUploadWidget(\n            {\n                cloudName: \"your-cloudname\",\n                uploadPreset: \"your-preset\",\n            },\n            (error, result) => {\n                if (!error && result.event === \"success\") {\n                    setImages((prev) => [...prev, { url: result.info.url, public_id: result.info.public_id }]);\n                }\n            }\n        );\n        widget.open();\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col md={6} className=\"new-product__form--container\">\n                    <Form style={{ width: \"100%\" }} onSubmit={handleSubmit}>\n                        <h1 className=\"mt-4\">Edit product</h1>\n                        {isSuccess && <Alert variant=\"success\">Product updated</Alert>}\n                        {isError && <Alert variant=\"danger\">{error.data}</Alert>}\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Product name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter product name\" value={name} required onChange={(e) => setName(e.target.value)} />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Product description</Form.Label>\n                            <Form.Control as=\"textarea\" placeholder=\"Product description\" style={{ height: \"100px\" }} value={description} required onChange={(e) => setDescription(e.target.value)} />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Price($)</Form.Label>\n                            <Form.Control type=\"number\" placeholder=\"Price ($)\" value={price} required onChange={(e) => setPrice(e.target.value)} />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" onChange={(e) => setCategory(e.target.value)}>\n                            <Form.Label>Category</Form.Label>\n                            <Form.Select value={category}>\n                                <option disabled selected>\n                                    -- Select One --\n                                </option>\n                                <option value=\"technology\">technology</option>\n                                <option value=\"tablets\">tablets</option>\n                                <option value=\"phones\">phones</option>\n                                <option value=\"laptops\">laptops</option>\n                            </Form.Select>\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\">\n                            <Button type=\"button\" onClick={showWidget}>\n                                Upload Images\n                            </Button>\n                            <div className=\"images-preview-container\">\n                                {images.map((image) => (\n                                    <div className=\"image-preview\">\n                                        <img src={image.url} />\n                                        {imgToRemove != image.public_id && <i className=\"fa fa-times-circle\" onClick={() => handleRemoveImg(image)}></i>}\n                                    </div>\n                                ))}\n                            </div>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Button type=\"submit\" disabled={isLoading || isSuccess}>\n                                Update Product\n                            </Button>\n                        </Form.Group>\n                    </Form>\n                </Col>\n                <Col md={6} className=\"new-product__image--container\"></Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default EditProductPage;\n","C:\\ecomern-frontend-main\\src\\pages\\CartPage.js",["176","177"],[],"import { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport React from \"react\";\nimport { Alert, Col, Container, Row, Table } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport CheckoutForm from \"../components/CheckoutForm\";\nimport { useIncreaseCartProductMutation, useDecreaseCartProductMutation, useRemoveFromCartMutation } from \"../services/appApi\";\nimport \"./CartPage.css\";\n\nconst stripePromise = loadStripe(\"your_stripe_publishable_key\");\n\nfunction CartPage() {\n    const user = useSelector((state) => state.user);\n    const products = useSelector((state) => state.products);\n    const userCartObj = user.cart;\n    let cart = products.filter((product) => userCartObj[product._id] != null);\n    const [increaseCart] = useIncreaseCartProductMutation();\n    const [decreaseCart] = useDecreaseCartProductMutation();\n    const [removeFromCart, { isLoading }] = useRemoveFromCartMutation();\n\n    function handleDecrease(product) {\n        const quantity = user.cart.count;\n        if (quantity <= 0) return alert(\"Can't proceed\");\n        decreaseCart(product);\n    }\n\n    return (\n        <Container style={{ minHeight: \"95vh\" }} className=\"cart-container\">\n            <Row>\n                <Col>\n                    <h1 className=\"pt-2 h3\">Shopping cart</h1>\n                    {cart.length == 0 ? (\n                        <Alert variant=\"info\">Shopping cart is empty. Add products to your cart</Alert>\n                    ) : (\n                        <Elements stripe={stripePromise}>\n                            <CheckoutForm />\n                        </Elements>\n                    )}\n                </Col>\n                {cart.length > 0 && (\n                    <Col md={5}>\n                        <>\n                            <Table responsive=\"sm\" className=\"cart-table\">\n                                <thead>\n                                    <tr>\n                                        <th>&nbsp;</th>\n                                        <th>Product</th>\n                                        <th>Price</th>\n                                        <th>Quantity</th>\n                                        <th>Subtotal</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {/* loop through cart products */}\n                                    {cart.map((item) => (\n                                        <tr>\n                                            <td>&nbsp;</td>\n                                            <td>\n                                                {!isLoading && <i className=\"fa fa-times\" style={{ marginRight: 10, cursor: \"pointer\" }} onClick={() => removeFromCart({ productId: item._id, price: item.price, userId: user._id })}></i>}\n                                                <img src={item.pictures[0].url} style={{ width: 100, height: 100, objectFit: \"cover\" }} />\n                                            </td>\n                                            <td>${item.price}</td>\n                                            <td>\n                                                <span className=\"quantity-indicator\">\n                                                    <i className=\"fa fa-minus-circle\" onClick={() => handleDecrease({ productId: item._id, price: item.price, userId: user._id })}></i>\n                                                    <span>{user.cart[item._id]}</span>\n                                                    <i className=\"fa fa-plus-circle\" onClick={() => increaseCart({ productId: item._id, price: item.price, userId: user._id })}></i>\n                                                </span>\n                                            </td>\n                                            <td>${item.price * user.cart[item._id]}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <div>\n                                <h3 className=\"h4 pt-4\">Total: ${user.cart.total}</h3>\n                            </div>\n                        </>\n                    </Col>\n                )}\n            </Row>\n        </Container>\n    );\n}\n\nexport default CartPage;\n","C:\\ecomern-frontend-main\\src\\components\\Navigation.js",["178"],[],"import axios from \"../axios\";\nimport React, { useRef, useState } from \"react\";\nimport { Navbar, Button, Nav, NavDropdown, Container } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { logout, resetNotifications } from \"../features/userSlice\";\nimport \"./Navigation.css\";\n\nfunction Navigation() {\n    const user = useSelector((state) => state.user);\n    const dispatch = useDispatch();\n    const bellRef = useRef(null);\n    const notificationRef = useRef(null);\n    const [bellPos, setBellPos] = useState({});\n\n    function handleLogout() {\n        dispatch(logout());\n    }\n    const unreadNotifications = user?.notifications?.reduce((acc, current) => {\n        if (current.status == \"unread\") return acc + 1;\n        return acc;\n    }, 0);\n\n    function handleToggleNotifications() {\n        const position = bellRef.current.getBoundingClientRect();\n        setBellPos(position);\n        notificationRef.current.style.display = notificationRef.current.style.display === \"block\" ? \"none\" : \"block\";\n        dispatch(resetNotifications());\n        if (unreadNotifications > 0) axios.post(`/users/${user._id}/updateNotifications`);\n    }\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Container>\n                <LinkContainer to=\"/\">\n                    <Navbar.Brand>Ecomern</Navbar.Brand>\n                </LinkContainer>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ms-auto\">\n                        {/* if no user */}\n                        {!user && (\n                            <LinkContainer to=\"/login\">\n                                <Nav.Link>Login</Nav.Link>\n                            </LinkContainer>\n                        )}\n                        {user && !user.isAdmin && (\n                            <LinkContainer to=\"/cart\">\n                                <Nav.Link>\n                                    <i className=\"fas fa-shopping-cart\"></i>\n                                    {user?.cart.count > 0 && (\n                                        <span className=\"badge badge-warning\" id=\"cartcount\">\n                                            {user.cart.count}\n                                        </span>\n                                    )}\n                                </Nav.Link>\n                            </LinkContainer>\n                        )}\n\n                        {/* if user */}\n                        {user && (\n                            <>\n                                <Nav.Link style={{ position: \"relative\" }} onClick={handleToggleNotifications}>\n                                    <i className=\"fas fa-bell\" ref={bellRef} data-count={unreadNotifications || null}></i>\n                                </Nav.Link>\n                                <NavDropdown title={`${user.email}`} id=\"basic-nav-dropdown\">\n                                    {user.isAdmin && (\n                                        <>\n                                            <LinkContainer to=\"/admin\">\n                                                <NavDropdown.Item>Dashboard</NavDropdown.Item>\n                                            </LinkContainer>\n                                            <LinkContainer to=\"/new-product\">\n                                                <NavDropdown.Item>Create Product</NavDropdown.Item>\n                                            </LinkContainer>\n                                        </>\n                                    )}\n                                    {!user.isAdmin && (\n                                        <>\n                                            <LinkContainer to=\"/cart\">\n                                                <NavDropdown.Item>Cart</NavDropdown.Item>\n                                            </LinkContainer>\n                                            <LinkContainer to=\"/orders\">\n                                                <NavDropdown.Item>My orders</NavDropdown.Item>\n                                            </LinkContainer>\n                                        </>\n                                    )}\n\n                                    <NavDropdown.Divider />\n                                    <Button variant=\"danger\" onClick={handleLogout} className=\"logout-btn\">\n                                        Logout\n                                    </Button>\n                                </NavDropdown>\n                            </>\n                        )}\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n            {/* notifications */}\n            <div className=\"notifications-container\" ref={notificationRef} style={{ position: \"absolute\", top: bellPos.top + 30, left: bellPos.left, display: \"none\" }}>\n                {user?.notifications.length > 0 ? (\n                    user?.notifications.map((notification) => (\n                        <p className={`notification-${notification.status}`}>\n                            {notification.message}\n                            <br />\n                            <span>{notification.time.split(\"T\")[0] + \" \" + notification.time.split(\"T\")[1]}</span>\n                        </p>\n                    ))\n                ) : (\n                    <p>No notifcations yet</p>\n                )}\n            </div>\n        </Navbar>\n    );\n}\n\nexport default Navigation;\n","C:\\ecomern-frontend-main\\src\\components\\ScrollToTop.js",[],[],"C:\\ecomern-frontend-main\\src\\features\\productSlice.js",[],[],"C:\\ecomern-frontend-main\\src\\features\\userSlice.js",[],[],"C:\\ecomern-frontend-main\\src\\services\\appApi.js",[],[],"C:\\ecomern-frontend-main\\src\\categories.js",[],[],"C:\\ecomern-frontend-main\\src\\axios.js",[],[],"C:\\ecomern-frontend-main\\src\\components\\SimilarProduct.js",[],[],"C:\\ecomern-frontend-main\\src\\components\\ProductPreview.js",[],[],"C:\\ecomern-frontend-main\\src\\components\\ToastMessage.js",[],[],"C:\\ecomern-frontend-main\\src\\components\\ClientsAdminPage.js",["179","180"],[],"import React, { useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport axios from \"../axios\";\nimport Loading from \"./Loading\";\nfunction ClientsAdminPage() {\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        axios\n            .get(\"/users\")\n            .then(({ data }) => {\n                setLoading(false);\n                setUsers(data);\n            })\n            .catch((e) => {\n                setLoading(false);\n                console.log(e);\n            });\n    }, []);\n\n    if (loading) return <Loading />;\n    if (users?.length == 0) return <h2 className=\"py-2 text-center\">No users yet</h2>;\n\n    return (\n        <Table responsive striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Client Id</th>\n                    <th>Client Name</th>\n                    <th>Email</th>\n                </tr>\n            </thead>\n            <tbody>\n                {users.map((user) => (\n                    <tr>\n                        <td>{user._id}</td>\n                        <td>{user.name}</td>\n                        <td>{user.email}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    );\n\n    return <div>ClientsAdminPage</div>;\n}\n\nexport default ClientsAdminPage;\n","C:\\ecomern-frontend-main\\src\\components\\DashboardProducts.js",["181","182"],[],"import React from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { useDeleteProductMutation } from \"../services/appApi\";\nimport \"./DashboardProducts.css\";\nimport Pagination from \"./Pagination\";\n\nfunction DashboardProducts() {\n    const products = useSelector((state) => state.products);\n    const user = useSelector((state) => state.user);\n    // removing the product\n    const [deletProduct, { isLoading, isSuccess }] = useDeleteProductMutation();\n    function handleDeleteProduct(id) {\n        // logic here\n        if (window.confirm(\"Are you sure?\")) deletProduct({ product_id: id, user_id: user._id });\n    }\n\n    function TableRow({ pictures, _id, name, price }) {\n        return (\n            <tr>\n                <td>\n                    <img src={pictures[0].url} className=\"dashboard-product-preview\" />\n                </td>\n                <td>{_id}</td>\n                <td>{name}</td>\n                <td>{price}</td>\n                <td>\n                    <Button onClick={() => handleDeleteProduct(_id, user._id)} disabled={isLoading}>\n                        Delete\n                    </Button>\n                    <Link to={`/product/${_id}/edit`} className=\"btn btn-warning\">\n                        Edit\n                    </Link>\n                </td>\n            </tr>\n        );\n    }\n\n    return (\n        <Table striped bordered hover responsive>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>Product ID</th>\n                    <th>Product Name</th>\n                    <th>Product Price</th>\n                </tr>\n            </thead>\n            <tbody>\n                <Pagination data={products} RenderComponent={TableRow} pageLimit={1} dataLimit={5} tablePagination={true} />\n            </tbody>\n        </Table>\n    );\n}\n\nexport default DashboardProducts;\n","C:\\ecomern-frontend-main\\src\\components\\OrdersAdminPage.js",["183"],[],"import React, { useEffect, useState } from \"react\";\nimport { Badge, Button, Modal, Table } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"../axios\";\nimport Loading from \"./Loading\";\nimport Pagination from \"./Pagination\";\n\nfunction OrdersAdminPage() {\n    const [orders, setOrders] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const products = useSelector((state) => state.products);\n    const [orderToShow, setOrderToShow] = useState([]);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n\n    function markShipped(orderId, ownerId) {\n        axios\n            .patch(`/orders/${orderId}/mark-shipped`, { ownerId })\n            .then(({ data }) => setOrders(data))\n            .catch((e) => console.log(e));\n    }\n\n    function showOrder(productsObj) {\n        let productsToShow = products.filter((product) => productsObj[product._id]);\n        productsToShow = productsToShow.map((product) => {\n            const productCopy = { ...product };\n            productCopy.count = productsObj[product._id];\n            delete productCopy.description;\n            return productCopy;\n        });\n        console.log(productsToShow);\n        setShow(true);\n        setOrderToShow(productsToShow);\n    }\n\n    useEffect(() => {\n        setLoading(true);\n        axios\n            .get(\"/orders\")\n            .then(({ data }) => {\n                setLoading(false);\n                setOrders(data);\n            })\n            .catch((e) => {\n                setLoading(false);\n            });\n    }, []);\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    if (orders.length === 0) {\n        return <h1 className=\"text-center pt-4\">No orders yet</h1>;\n    }\n\n    function TableRow({ _id, count, owner, total, status, products, address }) {\n        return (\n            <tr>\n                <td>{_id}</td>\n                <td>{owner?.name}</td>\n                <td>{count}</td>\n                <td>{total}</td>\n                <td>{address}</td>\n                <td>\n                    {status === \"processing\" ? (\n                        <Button size=\"sm\" onClick={() => markShipped(_id, owner?._id)}>\n                            Mark as shipped\n                        </Button>\n                    ) : (\n                        <Badge bg=\"success\">Shipped</Badge>\n                    )}\n                </td>\n                <td>\n                    <span style={{ cursor: \"pointer\" }} onClick={() => showOrder(products)}>\n                        View order <i className=\"fa fa-eye\"></i>\n                    </span>\n                </td>\n            </tr>\n        );\n    }\n\n    return (\n        <>\n            <Table responsive striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Client Name</th>\n                        <th>Items</th>\n                        <th>Order Total</th>\n                        <th>Address</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <Pagination data={orders} RenderComponent={TableRow} pageLimit={1} dataLimit={10} tablePagination={true} />\n                </tbody>\n            </Table>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Order details</Modal.Title>\n                </Modal.Header>\n                {orderToShow.map((order) => (\n                    <div className=\"order-details__container d-flex justify-content-around py-2\">\n                        <img src={order.pictures[0].url} style={{ maxWidth: 100, height: 100, objectFit: \"cover\" }} />\n                        <p>\n                            <span>{order.count} x </span> {order.name}\n                        </p>\n                        <p>Price: ${Number(order.price) * order.count}</p>\n                    </div>\n                ))}\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default OrdersAdminPage;\n","C:\\ecomern-frontend-main\\src\\components\\Pagination.js",[],[],"C:\\ecomern-frontend-main\\src\\components\\Loading.js",[],[],"C:\\ecomern-frontend-main\\src\\components\\CheckoutForm.js",["184"],[],"import { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport React, { useState } from \"react\";\nimport { Alert, Button, Col, Form, Row } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useCreateOrderMutation } from \"../services/appApi\";\n\nfunction CheckoutForm() {\n    const stripe = useStripe();\n    const elements = useElements();\n    const user = useSelector((state) => state.user);\n    const navigate = useNavigate();\n    const [alertMessage, setAlertMessage] = useState(\"\");\n    const [createOrder, { isLoading, isError, isSuccess }] = useCreateOrderMutation();\n    const [country, setCountry] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [paying, setPaying] = useState(false);\n\n    async function handlePay(e) {\n        e.preventDefault();\n        if (!stripe || !elements || user.cart.count <= 0) return;\n        setPaying(true);\n        const { client_secret } = await fetch(\"http://localhost:8080/create-payment\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \",\n            },\n            body: JSON.stringify({ amount: user.cart.total }),\n        }).then((res) => res.json());\n        const { paymentIntent } = await stripe.confirmCardPayment(client_secret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n            },\n        });\n        setPaying(false);\n\n        if (paymentIntent) {\n            createOrder({ userId: user._id, cart: user.cart, address, country }).then((res) => {\n                if (!isLoading && !isError) {\n                    setAlertMessage(`Payment ${paymentIntent.status}`);\n                    setTimeout(() => {\n                        // navigate(\"/orders\");\n                    }, 3000);\n                }\n            });\n        }\n    }\n\n    return (\n        <Col className=\"cart-payment-container\">\n            <Form onSubmit={handlePay}>\n                <Row>\n                    {alertMessage && <Alert>{alertMessage}</Alert>}\n                    <Col md={6}>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>First Name</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"First Name\" value={user.name} disabled />\n                        </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Email\" value={user.email} disabled />\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={7}>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Address</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Address\" value={address} onChange={(e) => setAddress(e.target.value)} required />\n                        </Form.Group>\n                    </Col>\n                    <Col md={5}>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Country</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Country\" value={country} onChange={(e) => setCountry(e.target.value)} required />\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <label htmlFor=\"card-element\">Card</label>\n                <CardElement id=\"card-element\" />\n                <Button className=\"mt-3\" type=\"submit\" disabled={user.cart.count <= 0 || paying || isSuccess}>\n                    {paying ? \"Processing...\" : \"Pay\"}\n                </Button>\n            </Form>\n        </Col>\n    );\n}\n\nexport default CheckoutForm;\n",{"ruleId":"185","severity":1,"message":"186","line":38,"column":8,"nodeType":"187","endLine":38,"endColumn":10,"suggestions":"188"},{"ruleId":"185","severity":1,"message":"189","line":18,"column":8,"nodeType":"187","endLine":18,"endColumn":10,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":21,"column":13,"nodeType":"193","endLine":21,"endColumn":142},{"ruleId":"191","severity":1,"message":"192","line":38,"column":17,"nodeType":"193","endLine":38,"endColumn":121},{"ruleId":"191","severity":1,"message":"192","line":101,"column":41,"nodeType":"193","endLine":101,"endColumn":64},{"ruleId":"194","severity":1,"message":"195","line":102,"column":54,"nodeType":"196","messageId":"197","endLine":102,"endColumn":56},{"ruleId":"191","severity":1,"message":"192","line":39,"column":54,"nodeType":"193","endLine":39,"endColumn":146},{"ruleId":"185","severity":1,"message":"198","line":25,"column":8,"nodeType":"187","endLine":25,"endColumn":10,"suggestions":"199"},{"ruleId":"194","severity":1,"message":"200","line":52,"column":60,"nodeType":"196","messageId":"197","endLine":52,"endColumn":62},{"ruleId":"191","severity":1,"message":"192","line":116,"column":41,"nodeType":"193","endLine":116,"endColumn":64},{"ruleId":"194","severity":1,"message":"195","line":117,"column":54,"nodeType":"196","messageId":"197","endLine":117,"endColumn":56},{"ruleId":"194","severity":1,"message":"200","line":32,"column":34,"nodeType":"196","messageId":"197","endLine":32,"endColumn":36},{"ruleId":"191","severity":1,"message":"192","line":60,"column":49,"nodeType":"193","endLine":60,"endColumn":139},{"ruleId":"194","severity":1,"message":"200","line":20,"column":28,"nodeType":"196","messageId":"197","endLine":20,"endColumn":30},{"ruleId":"194","severity":1,"message":"200","line":24,"column":23,"nodeType":"196","messageId":"197","endLine":24,"endColumn":25},{"ruleId":"201","severity":1,"message":"202","line":47,"column":5,"nodeType":"203","messageId":"204","endLine":47,"endColumn":40},{"ruleId":"205","severity":1,"message":"206","line":13,"column":39,"nodeType":"207","messageId":"208","endLine":13,"endColumn":48},{"ruleId":"191","severity":1,"message":"192","line":23,"column":21,"nodeType":"193","endLine":23,"endColumn":88},{"ruleId":"191","severity":1,"message":"192","line":107,"column":25,"nodeType":"193","endLine":107,"endColumn":119},{"ruleId":"205","severity":1,"message":"209","line":12,"column":11,"nodeType":"207","messageId":"208","endLine":12,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'user._id', and 'user.isAdmin'. Either include them or remove the dependency array.","ArrayExpression",["210"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["211"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["212"],"Expected '===' and instead saw '=='.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-unused-vars","'isSuccess' is assigned a value but never used.","Identifier","unusedVar","'navigate' is assigned a value but never used.",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [dispatch, user._id, user.isAdmin]",{"range":"219","text":"220"},"Update the dependencies array to be: [dispatch]",{"range":"221","text":"222"},"Update the dependencies array to be: [user._id]",{"range":"223","text":"224"},[1450,1452],"[dispatch, user._id, user.isAdmin]",[723,725],"[dispatch]",[775,777],"[user._id]"]